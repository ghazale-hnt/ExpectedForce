% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Exf.R
\name{expectedforce}
\alias{exf}
\alias{expectedforce}
\title{Expected Force centrality of vertices}
\usage{
expectedforce(graph, v = V(graph), directed = TRUE, mode = c("all", "out",
  "in"), weights = NULL, calc_hub = TRUE)
}
\arguments{
\item{graph}{The input graph}

\item{v}{The vertices for which expectedforce will be calculated.}

\item{directed}{Logical, whether directed or undirected graph should be considered.}

\item{mode}{Character constatnt, it specifies the direction of transmission for
calculating the expected force. For \sQuote{"out"} transmission flows from source
to target. For \sQuote{"in"} transmission flows from target to source. For
\sQuote{"all"} transmission flows both ways along an edge. This argument is
ignored for undirected graphs.}

\item{weights}{Optional positive weight vector for calculating weighted
expectedforce. If the graph has a \code{weight} edge attribute, then this is
used by default. If the graph has weights it is considered as undirected(for now).}

\item{calc_hub}{Logical, whether to calculate expectedforce for hub nodes
(node degree > 0.6*max_degree) or not. By default it is \code{TRUE}.}
}
\value{
A numeric vector with the expectedforce score for each vertex in
\code{v} for \code{expectedforce}.
}
\description{
This function can be called on the entire graph or on a subset of the verticies.
The ExF is computed independently for each node. This allows substantial speed-up
via on-the-fly computation or via parallelism. Caching of results is not yet
implemented and is thus up to the user.

The algorithm has time complexity O(n_1^2 * n_2) where n_1 and n_2 are the number
of neighbors in the first and second geodisc of the node. For most nodes, this is
quite fast. For hubs in scale-free networks, however, it can be slow. We somewhat
arbitrarily define hubs as nodes whose degree is greater than 0.6*max(degree(graph)).
The ExF of such nodes is (except possibly in some pathelogical examples) greater
than the remaining network nodes, typically 1.3 times the ExF of the highest non-hub
node. To avoid confusion in the outputs, however, this implementation (if requested
to skip computation for hubs) returns the degree of the node. This creates easy to
identify outliers.

questions/comments to: \email{expectedforce@mpi-inf.mpg.de}
}
\note{
expectedforce is calculated for simple graphs. In case of multiple edges
it return input error.
}
\examples{
library(igraph)
g <- forest.fire.game(1000,fw.prob=0.25,directed=FALSE)
expectedforce(g)
expectedforce(g,c(2,10))
expectedforce(g,weights = seq(1,ecount(g)))
#' g <- forest.fire.game(1000,fw.prob=0.25,directed=TRUE)
expectedforce(g,directed = TRUE)
}
\author{
Ghazaleh Haratinezhad \email{ghazale.hnt@gmail.com}

Glenn Lawyer \email{lawyer@mpi-inf.mpg.de}
}
\references{
to be added
}
\keyword{graphs}

